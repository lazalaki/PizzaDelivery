{"version":3,"sources":["stores/global-store/global-reducer.js","stores/global-store/global-types.js","stores/global-store/global-actions.js","services/httpServices.js","services/api/orders/orders-service.js","stores/global-store/global-store.js","services/api/food/food-service.js","shared/routes/routes.js","componets/navbar/navbar.js","componets/input/input.js","views/onboarding/login/login.js","views/onboarding/login/loginFromValidation.js","services/api/auth/auth-service.js","views/onboarding/onboardingTranslation.js","views/onboarding/registration/register.js","views/onboarding/registration/registerFormValidation.js","views/onboarding/index.js","componets/food-card/food-card.js","views/dashboard/home/home.js","views/dashboard/cart/cart.js","views/dashboard/dashboardTranslation.js","views/dashboard/orders/orders.js","views/dashboard/index.js","views/index.js","App.js","serviceWorker.js","i18n.js","index.js"],"names":["initialGlobalState","user","isLoggedIn","food","orders","currency","dollarRate","currentOrder","toast","globalReducer","state","action","type","payload","setUserAction","dispatch","setLoggedInAction","status","setCurrencyAction","setToastAction","post","url","body","axios","get","removeOrderItemRequest","userId","orderId","order_item_id","delete","complateOrderRequest","patch","createNewOrderRequest","GlobalStore","createContext","GlobalStoreProvider","children","useReducer","useEffect","JSON","parse","localStorage","getItem","setUser","getFood","id","getOrders","getCurrentOrder","setItem","stringify","removeItemFromCart","orderItemId","a","showSuccess","showError","message","addOrderItemToCart","foodId","showToast","clearToast","data","setFoodAction","foods","setOrdersAction","order","setCurrentOrderAction","Provider","value","logout","clear","setEurAsCurrency","setDollarAsCurrency","loginRoute","registerRoute","orderRoute","cartRoute","withRouter","history","useContext","loggedInLinks","label","command","onClick","icon","loggedOutLinks","btnLabel","push","model","style","marginLeft","Input","name","onChange","disabled","classes","formik","className","htmlFor","width","lg","md","xs","sm","onBlur","handleBlur","touched","errors","translate","useTranslation","t","useFormik","initialValues","email","password","validationSchema","Yup","shape","min","max","required","onSubmitHandler","values","handleChange","isValid","dirty","href","firstName","lastName","Onboarding","path","component","Login","Register","to","FoodCard","price","singleFood","header","alt","src","footer","marginRight","title","subTitle","price_eur","toFixed","description","Home","map","singFood","key","address","order_items","length","renderListItem","item","calculatePrice","CURRENCY_EUR","total","Orders","prices","forEach","format","created_at","Dashboard","exact","Cart","View","growl","useRef","current","show","severity","summary","detail","ref","App","Boolean","window","location","hostname","match","i18next","use","I18NextXhrBackend","I18nextBrowserLanguageDetector","initReactI18next","init","fallbackLng","debug","react","wait","useSuspense","bindI18n","bindStore","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.40df2070.chunk.js","sourcesContent":["import { SET_USER, SET_LOGGED_IN, SET_FOOD, SET_ORDERS, CURRENCY_DOLLAR, SET_CURRENCY, CURRENCY_EUR, SET_CURRENT_ORDER, SET_TOAST } from \"./global-types\";\n\nexport const initialGlobalState = {\n    user: null,\n    isLoggedIn: false,\n    food: [],\n    orders: [],\n    currency: CURRENCY_DOLLAR,\n    dollarRate: 1.14,\n    currentOrder: null,\n    toast: null\n}\n\nexport const globalReducer = (state = initialGlobalState, action) => {\n    switch (action.type) {\n        case SET_USER:\n        case SET_LOGGED_IN:\n        case SET_FOOD:\n        case SET_ORDERS:\n        case SET_CURRENCY:\n        case SET_CURRENT_ORDER:\n        case SET_TOAST:\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}","export const SET_USER = 'SET_USER';\nexport const SET_LOGGED_IN = 'SET_LOGGED_IN';\nexport const SET_FOOD = 'SET_FOOD';\nexport const SET_ORDERS = 'SET_ORDERS';\nexport const CURRENCY_EUR  = 'EUR';\nexport const CURRENCY_DOLLAR = 'USD';\nexport const SET_CURRENCY = 'SET_CURRENCY';\nexport const SET_CURRENT_ORDER = 'SET_CURRENT_ORDER';\nexport const SET_TOAST = 'SET_TOAST';","import { SET_LOGGED_IN,SET_USER, SET_FOOD, SET_ORDERS, SET_CURRENCY, SET_CURRENT_ORDER, SET_TOAST } from \"./global-types\"\n\nexport const setUserAction = (user, dispatch) => {\n    dispatch({\n        type: SET_USER,\n        payload: {user: user}\n    })\n}\n\nexport const setLoggedInAction = (status, dispatch) => {\n    dispatch({\n        type: SET_LOGGED_IN,\n        payload: { isLoggedIn: status}\n    })\n}\n\n\nexport const setFoodAction = (food, dispatch) => {\n    dispatch({\n        type: SET_FOOD,\n        payload: { food: food }\n    })\n}\n\nexport const setOrdersAction = (orders, dispatch) => {\n    dispatch({\n        type: SET_ORDERS,\n        payload: { orders: orders }\n    })  \n}\n\nexport const setCurrencyAction = (currency, dispatch) => {\n    dispatch({\n        type: SET_CURRENCY,\n        payload: { currency }\n    })\n}\n\n\nexport const setCurrentOrderAction = (currentOrder, dispatch) => {\n    dispatch({\n        type: SET_CURRENT_ORDER,\n        payload: { currentOrder }\n    })\n}\n\nexport const setToastAction = (toast, dispatch) => {\n    dispatch({\n        type: SET_TOAST,\n        payload: {toast}\n    })\n}\n    \n","import axios from 'axios'\n\nconst baseUrl = () => 'https://pizza-delivery-novi-sad.herokuapp.com/api'\n\nexport const post = (url, body) => axios.post(`${baseUrl()}${url}`, body);\n\nexport const get = (url) => axios.get(`${baseUrl()}${url}`);\n\nexport const deleteApi = (url) => axios.delete(`${baseUrl()}${url}`);\n\nexport const patch = (url, body) => axios.patch(`${baseUrl()}${url}`, body);","import { get, deleteApi, post, patch } from \"../../httpServices\";\n\n\nexport const getAllOrdersRequest = (userId) => get(`/users/${userId}/orders`)\nexport const removeOrderItemRequest = (userId, orderId, order_item_id) => deleteApi(`/users/${userId}/orders/${orderId}/order-item/${order_item_id}`)\nexport const currentOrderRequest = (userId) => get(`/users/${userId}/orders/last`)\nexport const addOrderItemRequest =  (userId, orderId, payload) =>  post(`/users/${userId}/orders/${orderId}/order-item`, payload);\nexport const complateOrderRequest = (userId, orderId, payload) => patch(`/users/${userId}/orders/${orderId}`, payload);\nexport const createNewOrderRequest = (userId) => post(`/users/${userId}/orders`, {});","import React, { createContext, useReducer, useEffect } from \"react\";\nimport { globalReducer, initialGlobalState } from \"./global-reducer\";\nimport { setUserAction, setLoggedInAction, setFoodAction, setOrdersAction, setCurrencyAction, setCurrentOrderAction, setToastAction } from \"./global-actions\";\nimport { getAllFood } from \"../../services/api/food/food-service\";\nimport { getAllOrdersRequest, currentOrderRequest, removeOrderItemRequest, addOrderItemRequest, createNewOrderRequest } from '../../services/api/orders/orders-service'\nimport { CURRENCY_EUR, CURRENCY_DOLLAR } from \"./global-types\";\n\nexport const GlobalStore = createContext({});\n\nexport const GlobalStoreProvider = ({children}) => {\n\n    const [state, dispatch] = useReducer(globalReducer, initialGlobalState);\n\n    useEffect(() => {\n        const user = JSON.parse(localStorage.getItem('user'))\n        if (user) {\n            setUser(user)\n        }\n        getFood()\n    }, [])\n\n    useEffect(() => {\n        if(state.user && state.user.id) {\n            getOrders();\n            getCurrentOrder()\n        }\n    }, [state.user])\n\n    // EXPOSED\n\n    const setUser = (user) => {\n        localStorage.setItem('user', JSON.stringify(user));\n        setUserAction(user, dispatch)\n        setLoggedInAction(true, dispatch)\n    }\n\n    const logout = () => {\n        localStorage.clear();\n        setUserAction(null, dispatch);\n        setLoggedInAction(false, dispatch);\n    }\n\n    const setEurAsCurrency = () => {\n        setCurrencyAction(CURRENCY_EUR, dispatch);\n    }\n\n    const setDollarAsCurrency = () => {\n        setCurrencyAction(CURRENCY_DOLLAR, dispatch);\n    }\n\n    const removeItemFromCart = async (orderItemId) => {\n         try {\n            await removeOrderItemRequest(state.user.id, state.currentOrder.id, orderItemId)\n            getCurrentOrder();\n            showSuccess('You have removed order item from cart')\n         } catch(error) {\n            showError(error.message)\n         }\n    } \n\n    const addOrderItemToCart = async (orderItemId) => {\n        try {\n            await addOrderItemRequest(state.user.id, state.currentOrder.id, {foodId: orderItemId})\n            getCurrentOrder();\n            showSuccess('You have added item to cart')\n         } catch(error) {\n            showError(error.message)\n         }\n    }\n\n    const showToast = async (toast) => {\n        setToastAction(toast, dispatch);\n    }\n\n    const showError = async (message) => {\n        showToast({\n            type: 'error',\n            message: message\n        })\n    }\n\n    const showSuccess = async (message) => {\n        showToast({\n            type: 'success',\n            message: message\n        })\n    }\n\n    const clearToast = async () => {\n        setToastAction(null, dispatch);\n    }\n\n    // PRIVATE\n\n    const setFood = (food) => {\n        setFoodAction(food, dispatch)\n    }\n\n    const getFood = async () => {\n        try {\n            const {data} = await getAllFood()\n            setFood(data.foods)\n        } catch(error) {\n            showError(error.message)\n        }\n    }\n\n\n    const setOrders = (orders) => {\n        setOrdersAction(orders, dispatch)\n    }\n\n    const getOrders = async () => {\n        try {\n            const {data} = await getAllOrdersRequest(state.user.id)\n            setOrders(data.orders)\n        } catch(error) {\n            showError(error.message)\n        }\n    }\n\n    const setCurrentOrder = (currentOrder) => {\n        setCurrentOrderAction(currentOrder, dispatch)\n    }\n    \n    const getCurrentOrder = async () => {\n        try {\n            const { data } = await currentOrderRequest(state.user.id)\n            if (!data.order) {\n                await createNewOrderRequest(state.user.id);\n            } else {\n                setCurrentOrder(data.order)\n            }\n        } catch(error) {\n            showError(error.message)\n        }\n    }\n\n\n    return (\n        <GlobalStore.Provider\n        value={{\n            state,\n            setUser,\n            logout,\n            setEurAsCurrency,\n            setDollarAsCurrency,\n            removeItemFromCart,\n            addOrderItemToCart,\n            showToast,\n            showError,\n            showSuccess,\n            clearToast,\n            getCurrentOrder,\n            getOrders\n        }}>\n            {children}\n        </GlobalStore.Provider>\n    )\n}\n\n","import { get } from '../../httpServices'\n\n\nexport const getAllFood = () => get('/food')","export const onboardingRoute = () => `/onboarding`\nexport const dashboardRoute = () => `/home`\nexport const loginRoute = () => `${onboardingRoute()}/login`\nexport const registerRoute = () => `${onboardingRoute()}/register`\nexport const orderRoute = () => `${dashboardRoute()}/orders`\nexport const cartRoute = () => `${dashboardRoute()}/cart`","import React, { useContext } from 'react'\n\nimport {Menubar} from 'primereact/menubar';\nimport {Button} from 'primereact/button';\nimport { GlobalStore } from '../../stores/global-store/global-store';\nimport { withRouter } from 'react-router-dom';\nimport { loginRoute, dashboardRoute, orderRoute, cartRoute } from '../../shared/routes/routes';\n\nconst CustomHeader = ({history}) => {\n\n    const {state, logout, setEurAsCurrency, setDollarAsCurrency} = useContext(GlobalStore)\n\n    const loggedInLinks = [\n        { label: 'Home', command: () => onClick('menu')},\n        { label: 'Orders', command: () => onClick('order')},\n        { label: 'Cart', icon: 'pi pi-shopping-cart', command: () => onClick('cart') },\n        { label: 'EUR', command: () => onClick('eur')},\n        {label: 'USD', command: () => onClick('usd')}\n    ]\n\n    const loggedOutLinks = [\n        { label: 'Home', command: () => onClick('menu') },\n    ]\n    const setItems = () => {\n        if (state.isLoggedIn) return loggedInLinks;\n        return loggedOutLinks\n    }\n\n    const loggInRoute = () => {\n        history.push(loginRoute())\n    }\n\n\n    const onClick = (btnLabel) => {\n        switch(btnLabel) {\n            case 'menu':\n                history.push(dashboardRoute())\n                break;\n            case 'order':\n                history.push(orderRoute())\n                break;\n            case 'cart':\n                history.push(cartRoute())\n                break;\n            case 'eur':\n                setEurAsCurrency();\n                break;\n            case 'usd':\n                setDollarAsCurrency()\n                break;\n            default: \n                history.push(dashboardRoute())\n        }\n    }\n\n    return(\n        <>\n            <Menubar model={setItems()} >\n                {state.isLoggedIn \n                    ? <Button label=\"Logout\" icon=\"pi pi-power-off\" style={{marginLeft:4}} onClick={logout}/> \n                    : <Button label=\"Login\" icon=\"pi pi-power-off\" style={{marginLeft:4}} onClick={loggInRoute}/>}                \n            </Menubar>\n        </>\n    )\n}\n\n\nexport default withRouter(CustomHeader);","import React from 'react';\nimport { InputText } from 'primereact/inputtext';\nimport { Col } from 'react-grid-system';\nimport './input.css';\n\nconst Input = ({label, name, onChange, value, disabled = false, type = 'text', classes= '', formik = null}) => {\n    const createErrorMessage = () => {\n        if (formik && formik.touched && formik.touched[name] && formik.errors && formik.errors[name]) {\n                return  <span>{formik.errors[name]}</span>\n        }\n        return <></>\n    }\n\n    return (\n        <div className={`p-field p-grid`}>\n            <Col>\n                <label htmlFor={name} className=\"p-col-fixed\" style={{width:'100px'}}>{label}</label>\n            </Col>\n            <Col className={'mg-top'}>\n                <div className=\"p-col\">\n                    <Col lg={12} md={12} xs={12} sm={12}>\n                        <InputText \n                            id={name}\n                            type={type} \n                            name={name} \n                            onChange={onChange} \n                            value={value}\n                            disabled={disabled}\n                            className={classes}\n                            onBlur={formik.handleBlur}\n                        />\n                    </Col>\n                    <Col lg={12} md={12} xs={12} sm={12} className={'error'}>\n                        {createErrorMessage()}\n                    </Col>\n                </div>\n            </Col>\n        </div>\n    );\n}\n\nexport default Input;","import React, { useContext } from 'react';\nimport { useTranslation} from 'react-i18next';\nimport { useFormik } from 'formik';\nimport { withRouter } from 'react-router-dom';\n\nimport Input from '../../../componets/input/input';\nimport { emailPlaceholder, passwordPlaceholder } from '../onboardingTranslation';\nimport { loginRequest } from '../../../services/api/auth/auth-service';\nimport { Button } from 'primereact/button';\nimport { dashboardRoute, registerRoute } from '../../../shared/routes/routes';\nimport { GlobalStore} from '../../../stores/global-store/global-store';\nimport { loginFormValidation } from './loginFromValidation';\n\nimport './login.css';\nimport { Row, Col } from 'react-grid-system';\n\nconst Login = ({history}) => {\n    const { t: translate } = useTranslation();\n\n    const {setUser, showSuccess, showError} = useContext(GlobalStore);\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: ''\n        },\n        validationSchema: loginFormValidation()\n    })\n\n    const onSubmitHandler = async () => {\n        try {\n            const {data} = await loginRequest(formik.values)        \n            setUser(data.user)\n            showSuccess('You have successfully logged in')\n            history.push(dashboardRoute())\n        } catch(error) {\n            showError(error.message)\n        }\n    }\n\n    return(\n        <div className={'container'}>\n            <div className={'form'}>\n                <Row className={'raw-height'}>\n                    <Col>\n                        <Input\n                            name={'email'}\n                            label={translate(emailPlaceholder)}\n                            onChange={formik.handleChange}\n                            value={formik.values.email}\n                            formik={formik}\n                            className={'input'}\n                        />\n                    </Col>\n                </Row>\n                <Row className={'raw-height'}>\n                    <Col>\n                        <Input \n                            type={'password'} \n                            name={\"password\"} \n                            onChange={formik.handleChange} \n                            value={formik.values.password}\n                            label={translate(passwordPlaceholder)}\n                            formik={formik}\n                            className={'input'}\n                        />\n                    </Col>\n                </Row>\n                <Row className={'raw-height'}>\n                    <Col lg={12} md={12} xs={12} sm={12}>\n                        <Button label=\"Submit\" disabled={!(formik.isValid && formik.dirty)} className=\"p-button-rounded\" onClick={onSubmitHandler} />   \n                    </Col>\n                    <Col lg={12} md={12} xs={12} sm={12}>\n                        <a href={registerRoute()}>Go to register page?</a>\n                    </Col>\n                </Row>\n            </div>\n        </div>\n    )\n}\n\n\nexport default withRouter(Login);","import * as Yup from 'yup';\n\nexport const loginFormValidation = () => \n  Yup.object().shape({\n    password: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .required('Required'),\n    email: Yup.string()\n      .email('Invalid email')\n      .required('Required'),\n});","import { post } from '../../httpServices';\n\nconst authServiceBaseUrl = () => '/auth';\nconst loginRequestUrl = () => `${authServiceBaseUrl()}/login`;\nconst registerRequestUrl = () => `${authServiceBaseUrl()}/register`;\n\nexport const loginRequest = (body) => post(loginRequestUrl(), body);\nexport const registerRequest = (body) => post(registerRequestUrl(), body);","export const emailPlaceholder = 'onboarding.emailPlaceholder';\nexport const passwordPlaceholder = 'onboarding.passwordPlaceholder';\nexport const firstNamePlaceholder = 'onboarding.firstNamePlaceholder';\nexport const lastNamePlaceholder = 'onboarding.lastNamePlaceholder'","import React, { useContext } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { withRouter } from 'react-router-dom';\nimport { useFormik } from 'formik';\n\nimport Input from '../../../componets/input/input'\nimport { Button } from 'primereact/button'\nimport { firstNamePlaceholder, lastNamePlaceholder, emailPlaceholder, passwordPlaceholder } from '../onboardingTranslation';\nimport { registerRequest } from '../../../services/api/auth/auth-service';\nimport { loginRoute } from '../../../shared/routes/routes';\nimport { registerFormValidation } from './registerFormValidation'\nimport './register.css'\nimport { Col, Row } from 'react-grid-system';\nimport { GlobalStore } from '../../../stores/global-store/global-store';\n\n\nconst Register = ({history}) => {\n\n    const { t: translate} = useTranslation()\n\n    const {showSuccess, showError} = useContext(GlobalStore)\n\n    const formik = useFormik({\n        initialValues: {\n            firstName: '',\n            lastName: '',\n            email: '',\n            password: ''\n        },\n        validationSchema: registerFormValidation()\n\n    })\n\n    \n    const onSubmitHandler = async () => {\n        try {\n            await registerRequest(formik.values)\n            showSuccess('You have successfully register')\n            history.push(loginRoute())\n        } catch(error) {\n            showError(error.message)\n        }\n    }\n\n    return(\n        <div className={'container'}>\n            <div className={'form'}>\n                <Row className={'raw-height'}>\n                    <Col>\n                        <Input \n                            label={translate(firstNamePlaceholder)} \n                            name={'firstName'} \n                            onChange={formik.handleChange} \n                            value={formik.values.firstName}\n                            formik={formik}\n                        />\n                    </Col>\n                </Row>\n\n                <Row className={'raw-height'}>\n                    <Col>\n                        <Input \n                            label={translate(lastNamePlaceholder)}\n                            name={'lastName'}\n                            onChange={formik.handleChange}\n                            value={formik.values.lastName}\n                            formik={formik} \n                        />\n                    </Col>\n                </Row>\n\n                <Row className={'raw-height'}>\n                    <Col>\n                        <Input \n                            label={translate(emailPlaceholder)}\n                            name={'email'}\n                            type={'email'}\n                            onChange={formik.handleChange}\n                            value={formik.values.email}\n                            formik={formik}\n                        />\n                    </Col>\n                </Row>\n\n                <Row className={'raw-height'}>\n                    <Col>\n                        <Input \n                            label={translate(passwordPlaceholder)}\n                            name={'password'}\n                            type={'password'}\n                            onChange={formik.handleChange}\n                            value={formik.values.password}\n                            formik={formik}\n                        />\n                    </Col>\n                </Row>\n\n                <Row className={'raw-height'}>\n                    <Col lg={12} md={12} xs={12} sm={12}>\n                        <Button label=\"Submit\" disabled={!(formik.isValid && formik.dirty)} className=\"p-button-rounded\" onClick={onSubmitHandler} />\n                    </Col>\n                    <Col lg={12} md={12} xs={12} sm={12}>\n                        <a href={loginRoute()}>Go to login?</a>\n                    </Col>\n                </Row>\n            </div>\n            \n        </div>\n    )\n}\n\n\nexport default withRouter(Register);","import * as Yup from 'yup';\n\nexport const registerFormValidation = () => \n  Yup.object().shape({\n    firstName: Yup.string()\n      .required('Required'),\n    lastName: Yup.string()\n      .required('Required'),\n    password: Yup.string()\n      .min(2, 'Too Short!')\n      .max(50, 'Too Long!')\n      .required('Required'),\n    email: Yup.string()\n      .email('Invalid email')\n      .required('Required'),\n});","import React from 'react'\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport { loginRoute, registerRoute } from '../../shared/routes/routes'\nimport Login from './login/login'\nimport Register from './registration/register'\n\n\nconst Onboarding = () => {\n    return(\n        <div>\n            <Switch>\n                <Route path={loginRoute()} component={Login} />\n                <Route path={registerRoute()} component={Register} />\n                <Redirect to={loginRoute()} />\n            </Switch>\n        </div>\n    )\n}\n\n\nexport default Onboarding","import React, { useContext } from 'react';\n\nimport {Card} from 'primereact/card';\nimport {Button} from 'primereact/button';\nimport { Col, Row } from 'react-grid-system';\nimport './food-card.css'\nimport { GlobalStore } from '../../stores/global-store/global-store';\nimport { CURRENCY_EUR, CURRENCY_DOLLAR } from '../../stores/global-store/global-types';\n\n\n\n\n\nconst FoodCard = ({singleFood}) => {\n\n    const {state, addOrderItemToCart} = useContext(GlobalStore);\n\n    const header = (\n        <img alt=\"Card\" src={singleFood.url} />\n    );\n\n    const footer = (\n        <span>\n            <Button label=\"Add to Cart\" icon=\"pi pi-check\" style={{marginRight: '.25em'}} onClick={() => addOrderItemToCart(singleFood.id)} />\n        </span>\n    );\n\n    const getPrice = (price) => {\n        if (state.currency === CURRENCY_EUR) {\n            return `${price} ${CURRENCY_EUR}`\n        }\n\n        return `${(price * state.dollarRate).toFixed(2)} ${CURRENCY_DOLLAR}`; \n    }\n\n    return(\n        <>\n            <Row>\n                <Col className={'mg-bottom'}>\n                    <Card title={singleFood.name} subTitle={getPrice(singleFood.price_eur)} style={{width: '360px'}} header={header} footer={footer} className=\"ui-card-shadow\">\n                        <div>{singleFood.description}</div>\n                    </Card>\n                </Col>\n            </Row>\n        </>\n    )\n}\n\nexport default FoodCard;","import React, { useContext } from 'react'\nimport { GlobalStore } from '../../../stores/global-store/global-store';\nimport FoodCard from '../../../componets/food-card/food-card';\nimport { Row, Col } from 'react-grid-system';\n\nimport './home.css'\n\nconst Home = () => {\n\n    const {state } = useContext(GlobalStore);\n    \n    return(\n        <>\n            <Row>\n                {state.food.map(singFood => {\n                    return (\n                    <Col key={singFood.id} lg={4} md={4} xs={12} sm={12} className={'mg'}>\n                        <FoodCard singleFood={singFood} key={singFood.id} />\n                    </Col>);\n                })}\n            </Row>\n        </>\n    )\n}\n\nexport default Home;","import React, { useContext } from 'react'\nimport { useFormik } from 'formik';\nimport { useTranslation } from 'react-i18next';\n\nimport { GlobalStore } from '../../../stores/global-store/global-store';\nimport Input from '../../../componets/input/input';\nimport { addressPlaceholder } from '../dashboardTranslation';\nimport { Col } from 'react-grid-system';\nimport { Card } from 'primereact/card';\nimport { CURRENCY_EUR , CURRENCY_DOLLAR} from '../../../stores/global-store/global-types';\nimport {Button} from 'primereact/button'\nimport { complateOrderRequest } from '../../../services/api/orders/orders-service';\nimport { dashboardRoute } from '../../../shared/routes/routes';\nimport { withRouter } from 'react-router-dom';\n\nconst Cart = ({history}) => {\n\n    const {state, removeItemFromCart, showError, showSuccess, getCurrentOrder} = useContext(GlobalStore)\n\n    const { t: translate } = useTranslation()\n    const formik = useFormik({\n        initialValues: {\n            address: ''\n        }\n    })\n    \n    if(!state.currentOrder || (state.currentOrder.order_items && state.currentOrder.order_items.length == 0)) {\n        return <h3>Your cart is currently empty</h3>\n    }\n\n    const removeItem = (id) => {\n        removeItemFromCart(id)\n    }\n\n    const renderListItem = (item) => {\n        return (\n            <Col key={item.id} lg={12} md={12} xs={12} sm={12}>\n                <Card className={'mg-bottom'}>        \n                    <div>\n                        <div className=\"p-grid\">\n                            <div className=\"p-col-12\">Name: {item.food.name}</div>\n                            <div>Price: {calculatePrice(item.food.price_eur)} {state.CURRENCY_EUR}</div>\n                        </div>\n                    </div>\n                    <Button label=\"Remove\" className=\"p-button-rounded p-button-danger\" onClick={() => removeItem(item.id)}/>\n                </Card>\n            </Col>\n        );\n    };\n\n    const calculatePrice = (price) => {\n        let total = 0;\n        total = total + price\n\n        if (state.currency === CURRENCY_EUR) {\n            return `${total} ${CURRENCY_EUR}`;\n        }\n\n        return `${(total * state.dollarRate).toFixed(2)} ${CURRENCY_DOLLAR}`;         \n    }\n\n    const onSubmitHandler = async () => {\n        try {\n            await complateOrderRequest(state.user.id, state.currentOrder.id, formik.values)        \n            showSuccess('You have complated your order')\n            getCurrentOrder();\n            history.push(dashboardRoute())\n        } catch(error) {\n            showError(error.message)\n        }\n    }\n    \n    return(\n        <>\n            <h2>Cart:</h2>\n            {state.currentOrder.order_items.map(item => {\n                return renderListItem(item);\n            })}\n            <Input \n                type={'address'} \n                name={\"address\"} \n                onChange={formik.handleChange} \n                value={formik.values.address}\n                label={translate(addressPlaceholder)}\n                formik={formik}\n                className={'input'}\n            />\n            <Button label=\"Submit\" disabled={!(formik.isValid && formik.dirty)} className=\"p-button-rounded\" onClick={onSubmitHandler} /> \n        </>\n    )\n}\n\n\nexport default withRouter(Cart);\n\n","export const addressPlaceholder = 'orders.addressPlaceholder';","import React, { useContext, useEffect } from 'react';\n\nimport { GlobalStore } from '../../../stores/global-store/global-store';\nimport {Card} from 'primereact/card';\nimport Moment from 'react-moment';\n\nimport { Row, Col } from 'react-grid-system';\nimport './orders.css'\nimport { CURRENCY_EUR, CURRENCY_DOLLAR } from '../../../stores/global-store/global-types';\n\n\nconst Orders = () => {\n\n    const {state, getOrders} = useContext(GlobalStore)\n\n    useEffect(() => {\n        if (state.user && state.user.id) {\n            getOrders()\n        }\n    }, [])\n\n    const renderListItem = (order) => {\n        return (\n            <Col key={order.id} lg={12} md={12} xs={12} sm={12}>\n                <Card className={'mg-bottom'}>        \n                    <div>\n                        <div className=\"p-grid\">\n                            <div className=\"p-col-12\">Description: {order.order_items.map(item => `${item.food.name}, `)}</div>\n                            <div className=\"p-col-12\">Address: <b>{order.address}</b></div>\n                            <div>Price: {calculatePrice(order.order_items.map(item => item.food.price_eur))}</div>\n                            <div className=\"p-col-12\">Created At: <Moment format=\"DD/MM/YYYY HH:mm\">{order.created_at}</Moment></div>\n                        </div>\n                    </div>\n                </Card>\n            </Col>\n        );\n    };\n\n    const calculatePrice = (prices) => {\n        let total = 0;\n        prices.forEach(price => {\n            total = total + price;\n        })\n        if (state.currency === CURRENCY_EUR) {\n            return `${total} ${CURRENCY_EUR}`;;\n        }\n\n        return `${(total * state.dollarRate).toFixed(2)} ${CURRENCY_DOLLAR}`;         \n    }\n\n    return(\n        <>\n            <h2>Orders:</h2>\n            <Row>\n                {state.orders.map(order => {\n                    return renderListItem(order)\n                })}\n            </Row>\n        </>\n    )\n}\n\nexport default Orders\n\n","import React from 'react'\nimport { Switch, Redirect,Route } from 'react-router-dom';\n\nimport Home from './home/home'\nimport { dashboardRoute, cartRoute, orderRoute } from '../../shared/routes/routes';\nimport Cart from './cart/cart';\nimport Orders from './orders/orders';\n\nconst Dashboard = () => {\n    return(\n        <>\n            <Switch>\n                <Route path={dashboardRoute()} component={Home} exact />\n                <Route path={orderRoute()} component={Orders} />\n                <Route path={cartRoute()} component={Cart} />\n                <Redirect to={dashboardRoute()} />\n            </Switch>\n        </>\n    )\n}\n\n\nexport default Dashboard;","import React, {useRef, useEffect, useContext} from 'react';\nimport { Route, Redirect, Switch } from 'react-router-dom'\n\nimport { onboardingRoute, dashboardRoute } from '../shared/routes/routes'\nimport 'primereact/resources/themes/nova-light/theme.css'\nimport 'primereact/resources/primereact.min.css'\nimport 'primeicons/primeicons.css'\nimport {Growl} from 'primereact/growl';\nimport CustomHeader from '../componets/navbar/navbar'\nimport { GlobalStore } from '../stores/global-store/global-store';\nimport Onboarding from './onboarding';\nimport Dashboard from './dashboard';\n\nconst View = () => {\n\n  const {state, clearToast} = useContext(GlobalStore);\n\n  let growl = useRef(null);\n\n  useEffect(() => {\n    if (state) {\n      const toast = state.toast;\n      if (toast) {\n        if (toast.type === 'error') {\n          showError(toast.message)\n        } else {\n          showSuccess(toast.message)\n        }\n      clearToast();\n      }\n    }\n  }, [state && state.toast])\n\n  const showSuccess = (message) => {\n    growl.current.show({severity: 'success', summary: 'Success', detail: message});\n  }\n\n  const showError = (message) => {\n      growl.current.show({severity: 'error', summary: 'Error', detail: message});\n  }\n\n  return (\n      <>\n      <Growl ref={growl} />\n        <CustomHeader />\n        <Switch>\n          <Route path={onboardingRoute()} component={Onboarding} />\n          <Route path={dashboardRoute()} component={Dashboard} />        \n          <Redirect to={onboardingRoute()} />\n        </Switch>\n      </>\n  )\n}\n\nexport default View;","import React from 'react';\n\nimport 'primereact/resources/themes/nova-light/theme.css'\nimport 'primereact/resources/primereact.min.css'\nimport 'primeicons/primeicons.css'\nimport {GlobalStoreProvider, GlobalStore} from './stores/global-store/global-store';\nimport { Container } from 'react-grid-system';\nimport View from './views';\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <GlobalStoreProvider>\n        <View />\n        </GlobalStoreProvider>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18next from 'i18next';\nimport I18NextXhrBackend from 'i18next-xhr-backend';\nimport I18nextBrowserLanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\n\ni18next\n  .use(I18NextXhrBackend)\n  .use(I18nextBrowserLanguageDetector)\n  .use(initReactI18next)\n  .init({\n    fallbackLng: 'en',\n    debug: false,\n    react: {\n      wait: true,\n      useSuspense: false,\n      bindI18n: 'languageChanged loaded',\n      bindStore: 'added removed',\n    },\n  });\nexport default i18next;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <App />\n    </HashRouter>    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}